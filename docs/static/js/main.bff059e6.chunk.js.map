{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAuB5C,OAEI,sBAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAG,OAAMP,GAAN,mBAAqBO,OACtCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAxBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAQF,GAHR,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAIDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAZtB,kBAiBZM,GAjBY,4CAAH,sDCCPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAbAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IACGqB,EDhBwBK,CAAa1B,GAAhCa,EAHyB,EAG9BN,KAAaa,EAHiB,EAGjBA,QAIpB,OAFAO,QAAQC,IAAIR,GAGR,qCACI,oBAAIJ,UAAU,+CAAd,SAA+DhB,IAE9DoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAAAC,GAAG,OAEV,cAAC,EAAD,eAEKA,GADAA,EAAIC,aEnBpBkB,EAAe,WAAM,MAGM3C,mBAAS,CAAC,gBAHhB,mBAGvB4C,EAHuB,KAGX7C,EAHW,KAM9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAECA,SAAYA,GADPA,Y,MCf7B+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bff059e6.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    //Este evento me permite que a medida que vaya escribiendo se vaya pintando en el input\r\n    const handleInputChange = (e) =>{\r\n        \r\n        setInputValue(e.target.value);\r\n    }\r\n    \r\n    //Este evento me permite que al dar un enter, el estado de mi caja de texto se agregue al estado setCategories  del componente padre\r\n    const handleSubmit = (e) =>{\r\n        //Usamos el e.preventDefault para que no se me refresque la pantalla constantemente\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            //En esta linea debo usar la prop setCategories que estoy enviando al componente, luego hago un callback para poder llamar a catq, que es el state del componente padre y traerme los datos que tenía antes en el array, finalmente paso input value\r\n            setCategories(cat => [ inputValue, ...cat]); //Puedo acomodar al reves el spred y el input para que cambie el ordend e renderizado\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={handleInputChange }\r\n            />\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async (category) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=UV6x8pMWzDXt5TBlQt1XWyiSJUJCi6cl`\r\n    const resp = await fetch ( url );\r\n    const {data} = await resp.json(); //paso mi respuesta a json y desestructuro obteniendo la data.\r\n\r\n    //Creo una constantepara poder mapear la data que me devuelve la peticíon y así solo usar los campos \r\n    //que yo necesito.\r\n    const gifs = data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n   \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //Este es un Custom Hook que uso para conectar con el endpoint\r\n    const {data:images, loading} = useFetchGifs(category); //Uso el :images para renombrar a data\r\n\r\n    console.log(loading);\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"titulo animate__animated animate__fadeInDown\">{ category }</h2>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map(img=>(\r\n                        \r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        { ...img }/> \r\n                    ))\r\n                }\r\n            \r\n            </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        \r\n        getGifs(category)\r\n            .then(imgs=>{\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n\r\n            })\r\n\r\n    }, [category])\r\n    return state; // {data:[], loading:true }\r\n}\r\n\r\n    // //El useEffect hace que mi funcion solo se renderice la primera vez que la llamo, es decir si agrego algún boton\r\n    // //que cambie el estado de mi componente no va a renderizar nuevamente esta funcion.\r\n    // useEffect(()=>{\r\n    //     getGifs(category)\r\n    //         .then(setImages); //como la función es una async me devuelve la promesa, por eso uso el then\r\n    // },[category]); //En esta linea establezco que la category es una dependencia para la funcion\r\n\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    // const categories = ['Dragon Ball','Samurai X','Pokemon']\r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories= {setCategories}/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {   //Un map me va a recorrer todo el array, si quisiera puedo tmb pedirle que me devuelva el indice.\r\n                    categories.map( category => (\r\n                       <GifGrid \r\n                        key={category}\r\n                        category = {category} \r\n                       />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}